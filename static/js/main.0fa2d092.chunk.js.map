{"version":3,"sources":["dmAppointment.ts","dmTodo.ts","dmTimer.ts","dmMain.ts","index.tsx"],"names":["grammar","person","day","meeting_time","boolGrammar","bool","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","say","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","listen","nomatch","send","type","value","whole_day","time","confirm_time","confirm_whole","created","dmMachineTodo","dmMachineTimer","duration","promptAndAsk","invoke","id","src","_","nluRequest","onDone","event","intent","data","name","console","log","onError","set","confirmation","text","fetch","Request","proxyurl","method","headers","body","then","json","dmMachineMain","statement","answer","appointment","item","timer","_context","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"sXAIA,MAAMA,EAAyF,CAE3F,KAAQ,CAAEC,OAAQ,kBAClB,QAAW,CAAEA,OAAQ,mBACrB,OAAU,CAAEA,OAAQ,iBACpB,QAAW,CAAEA,OAAQ,iBACrB,IAAO,CAAEA,OAAQ,cACjB,IAAO,CAAEA,OAAQ,eACjB,OAAU,CAAEA,OAAQ,iBACpB,MAAS,CAAEA,OAAQ,iBACnB,KAAQ,CAAEA,OAAQ,mBAGlB,cAAe,CAAEC,IAAK,YACtB,YAAa,CAAEA,IAAK,UACpB,YAAa,CAAEA,IAAK,UACpB,aAAc,CAAEA,IAAK,WACrB,eAAgB,CAAEA,IAAK,aACvB,cAAe,CAAEA,IAAK,YACtB,YAAa,CAAEA,IAAK,UACpB,SAAY,CAAEA,IAAK,YAGnB,OAAQ,CAAEC,aAAc,OACxB,OAAQ,CAAEA,aAAc,OACxB,OAAQ,CAAEA,aAAc,SACxB,OAAQ,CAAEA,aAAc,QACxB,OAAQ,CAAEA,aAAc,QACxB,OAAQ,CAAEA,aAAc,OACxB,OAAQ,CAAEA,aAAc,SACxB,OAAQ,CAAEA,aAAc,SACxB,OAAQ,CAAEA,aAAc,QACxB,QAAS,CAAEA,aAAc,OACzB,QAAS,CAAEA,aAAc,WAGvBC,EAAmD,CACrD,IAAO,CAACC,MAAM,GACd,KAAQ,CAACA,MAAM,GACf,YAAa,CAACA,MAAM,GACpB,aAAc,CAACA,MAAM,GACrB,KAAQ,CAACA,MAAM,GACf,KAAQ,CAACA,MAAM,GACf,GAAM,CAACA,MAAM,GACb,WAAc,CAACA,MAAM,GAErB,KAAQ,CAACA,MAAM,GACf,GAAM,CAACA,MAAM,GACb,SAAU,CAACA,MAAM,GACjB,aAAc,CAACA,MAAM,GACrB,WAAc,CAACA,MAAM,GACrB,aAAc,CAACA,MAAM,GACrB,WAAY,CAACA,MAAM,GACnB,eAAgB,CAACA,MAAM,IAIdC,EAAuD,CAChEC,QAAS,UACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,YAGfC,QAAS,CACLL,QAAS,SACTG,GAAI,CAAEG,UAAW,OACjBL,OAAQ,CACJM,OAAQ,CAAEC,MAAOC,EAAI,kCAG7BC,IAAK,CACDV,QAAS,SACTG,GAAI,CACAQ,WAAY,CAAC,CACTC,KAAOC,GAAY,WAAapB,EAAQoB,EAAQC,YAAc,IAC9DC,QAASC,aAAQH,IAAqB,CAAEnB,OAAQD,EAAQoB,EAAQC,WAAWpB,WAC3EuB,OAAQ,OAGZ,CAAEA,OAAQ,cAEdhB,OAAQ,CACJM,OAAQ,CACJC,MAAOC,EAAI,6BACXN,GAAI,CAAEG,UAAW,QAErBY,IAAK,CACDV,MAAOW,KAEXC,QAAS,CACLZ,MAAOC,EAAI,2BACXN,GAAI,CAAEG,UAAW,aAI7BX,IAAK,CACDK,QAAS,SACTG,GAAI,CACAQ,WAAY,CAAC,CACTC,KAAOC,GAAY,QAAUpB,EAAQoB,EAAQC,YAAc,IAC3DC,QAASC,aAAQH,IAAqB,CAAElB,IAAKF,EAAQoB,EAAQC,WAAWnB,QACxEsB,OAAQ,aAGZ,CAAEA,OAAQ,cAEdhB,OAAQ,CACJM,OAAQ,CACJC,MAAOa,aAAMR,IAAD,CACRS,KAAM,QACNC,MAAM,MAAD,OAAQV,EAAQnB,OAAhB,mCAETS,GAAI,CAAEG,UAAW,QAErBY,IAAK,CACDV,MAAOW,KAEXC,QAAS,CACLZ,MAAOC,EAAI,4BACXN,GAAI,CAAEG,UAAW,aAI7BkB,UAAW,CACPxB,QAAS,SACTG,GAAI,CACAQ,WAAY,CAAC,CACTC,KAAOC,IAAoD,IAAxChB,EAAYgB,EAAQC,WAAWhB,KAClDiB,QAASC,aAAQH,IAAqB,CAAEf,KAAMD,EAAYgB,EAAQC,WAAWhB,SAC7EmB,OAAQ,iBACV,CACEL,KAAOC,IAAoD,IAAxChB,EAAYgB,EAAQC,WAAWhB,KAClDiB,QAASC,aAAQH,IAAqB,CAAEf,KAAMD,EAAYgB,EAAQC,WAAWhB,SAC7EmB,OAAQ,QAEZ,CAAEA,OAAQ,cAEVhB,OAAQ,CACJM,OAAQ,CACJC,MAAOa,aAAMR,IAAD,CACRS,KAAM,QACNC,MAAM,OAAD,OAASV,EAAQlB,IAAjB,qCAETQ,GAAI,CAAEG,UAAW,QAErBY,IAAK,CACDV,MAAOW,KAEXC,QAAS,CACLZ,MAAOC,EAAI,4BACXN,GAAI,CAAEG,UAAW,aAKjCmB,KAAM,CACFzB,QAAS,SACTG,GAAI,CACAQ,WAAY,CAAC,CACTC,KAAOC,GAAY,iBAAmBpB,EAAQoB,EAAQC,YAAc,IACpEC,QAASC,aAAQH,IAAqB,CAAEjB,aAAcH,EAAQoB,EAAQC,WAAWlB,iBACjFqB,OAAQ,gBAGZ,CAAEA,OAAQ,cAEdhB,OAAQ,CACJM,OAAQ,CACJC,MAAOa,aAAMR,IAAD,CACRS,KAAM,QACNC,MAAM,qCAEVpB,GAAI,CAAEG,UAAW,QAErBY,IAAK,CACDV,MAAOW,KAEXC,QAAS,CACLZ,MAAOa,aAAMR,IAAD,CACRS,KAAM,QACNC,MAAM,2BAAD,OAA6BV,EAAQjB,kBAE9CO,GAAI,CAAEG,UAAW,aAI7BoB,aAAa,CACT1B,QAAS,SACTG,GAAI,CACAQ,WAAY,CAAC,CACTC,KAAOC,GAAmD,GAAvChB,EAAYgB,EAAQC,WAAWhB,KAClDiB,QAASC,aAAQH,IAAqB,CAAEf,KAAMD,EAAYgB,EAAQC,WAAWhB,SAC7EmB,OAAQ,WACV,CACEL,KAAOC,GAAmD,GAAvChB,EAAYgB,EAAQC,WAAWhB,KAClDiB,QAASC,aAAQH,IAAqB,CAAEf,KAAMD,EAAYgB,EAAQC,WAAWhB,SAC7EmB,OAAQ,OAEZ,CAAEA,OAAQ,cAEVhB,OAAQ,CACJM,OAAQ,CACJC,MAAOa,aAAMR,IAAD,CACRS,KAAM,QACNC,MAAM,oDAAD,OAAsDV,EAAQnB,OAA9D,eAA2EmB,EAAQlB,IAAnF,eAA6FkB,EAAQjB,aAArG,SAETO,GAAI,CAAEG,UAAW,QAEzBY,IAAK,CACDV,MAAOW,KAEXC,QAAS,CACLZ,MAAOC,EAAI,4BACXN,GAAI,CAAEG,UAAW,aAK7BqB,cAAe,CACX3B,QAAS,SACTG,GAAI,CACAQ,WAAY,CAAC,CACTC,KAAOC,GAAmD,GAAvChB,EAAYgB,EAAQC,WAAWhB,KAClDiB,QAASC,aAAQH,IAAqB,CAAEf,KAAMD,EAAYgB,EAAQC,WAAWhB,SAC7EmB,OAAQ,WACV,CACEL,KAAOC,GAAmD,GAAvChB,EAAYgB,EAAQC,WAAWhB,KAClDiB,QAASC,aAAQH,IAAqB,CAAEf,KAAMD,EAAYgB,EAAQC,WAAWhB,SAC7EmB,OAAQ,OAEZ,CAAEA,OAAQ,cAEVhB,OAAQ,CACJM,OAAQ,CACJC,MAAOa,aAAMR,IAAD,CACRS,KAAM,QACNC,MAAM,oDAAD,OAAsDV,EAAQnB,OAA9D,eAA2EmB,EAAQlB,IAAnF,2BAETQ,GAAI,CAAEG,UAAW,QAEzBY,IAAK,CACDV,MAAOW,KAEXC,QAAS,CACLZ,MAAOC,EAAI,4BACXN,GAAI,CAAEG,UAAW,aAK7BsB,QAAS,CACL5B,QAAS,SAETC,OAAQ,CACJM,OAAQ,CAAEC,MAAOC,EAAI,0CC9PxBoB,EAA2D,CACpE7B,QAAS,UACTC,OAAQ,CACJI,QAAS,CACLL,QAAS,SACTC,OAAQ,CACJM,OAAQ,CAAEC,MAAOC,EAAI,0ECPxBqB,EAA4D,CACrE9B,QAAS,UACTC,OAAQ,CACJI,QAAQ,aACJF,GAAI,CACJQ,WAAY,CACRM,OAAQ,WACRF,QAASC,aAAQH,IAAqB,CAAEkB,SAAUlB,EAAQC,iBAG3DkB,EAAa,+CAEpBD,SAAU,CACNE,OAAQ,CACRC,GAAI,QACIC,IAAK,CAACtB,EAASuB,IAAMC,EAAWxB,EAAQkB,UACxCO,OAAQ,CACJrB,OAAQ,MACRF,QAAS,CAACC,aAAO,CAACoB,EAAGG,KAAmB,CAACC,OAAQD,EAAME,KAAKD,OAAOE,SACrE,CAACN,EAAcG,IAAcI,QAAQC,IAAIL,EAAME,QAEzDI,QAAS,CACG5B,OAAQ,UACRF,QAAS,CAACqB,EAAEG,IAAUI,QAAQC,IAAIL,EAAME,SAIpDK,IAAK,CACDtC,MAAOa,YAAK,aACZlB,GAAI,CACAG,UAAW,CACP,CAAEW,OAAQ,eAAgBL,KAAOC,GAA+B,SAAnBA,EAAQ2B,QACrD,CAAEvB,OAAQ,cAG1B8B,aAAa,CACTvC,MAAOa,aAAMR,IAAD,CACRS,KAAM,QACNC,MAAM,gBAAD,OAAkBV,EAAQkB,eAGvCX,QAAQ,CACJZ,MAAOa,aAAMR,IAAD,CACRS,KAAM,QACNC,MAAM,uBAAD,OAAyBV,EAAQkB,SAAjC,0CAET5B,GAAI,CAAEG,UAAW,cCzChB+B,EAAcW,GACvBC,MAAM,IAAIC,QAAQC,4FAAoB,CAClCC,OAAQ,OACRC,QAAS,CAAE,OAAU,oBACrBC,KAAK,aAAD,OAAeN,EAAf,SAEHO,MAAKd,GAAQA,EAAKe,SAGdC,EAA2D,CACpEzD,QAAS,OACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,YAGfC,QAAQ,aACJF,GAAI,CACJQ,WAAY,CACRM,OAAQ,YACRF,QAASC,aAAQH,IAAqB,CAAE6C,UAAW7C,EAAQC,iBAG5DkB,EAAa,+BAEpB0B,UAAW,CACPzB,OAAQ,CACRC,GAAI,MACIC,IAAK,CAACtB,EAASuB,IAAMC,EAAWxB,EAAQ6C,WACxCpB,OAAQ,CACJrB,OAAQ,SACRF,QAAS,CAACC,aAAO,CAACoB,EAAGG,KAAmB,CAACC,OAAQD,EAAME,KAAKD,OAAOE,SACrE,CAACN,EAAcG,IAAcI,QAAQC,IAAIL,EAAME,QAEzDI,QAAS,CACG5B,OAAQ,UAChBF,QAAS,CAACqB,EAAEG,IAAUI,QAAQC,IAAIL,EAAME,SAI5CkB,OAAQ,CACRnD,MAAOa,YAAK,aACZlB,GAAI,CACAG,UAAW,CACP,CAAEW,OAAQ,cAAeL,KAAOC,GAA+B,gBAAnBA,EAAQ2B,QACpD,CAAEvB,OAAQ,OAAQL,KAAOC,GAA+B,cAAnBA,EAAQ2B,QAC7C,CAAEvB,OAAQ,QAASL,KAAOC,GAA+B,UAAnBA,EAAQ2B,QAC9C,CAAEvB,OAAQ,cAItB2C,YAAY,eACN7D,GAEN8D,KAAK,eACEhC,GAEPiC,MAAM,eACChC,K,oBCvDR,SAASE,EAAazB,GACzB,MAAQ,CACXP,QAAS,SACTC,OAAQ,CACGM,OAAQ,CACJC,MAAOC,EAAIF,GACXJ,GAAI,CAAEG,UAAW,QAErBY,IAAK,CACPV,MAAOa,YAAK,aAKf,SAASZ,EAAIuC,GAChB,OAAO3B,aAAM0C,IAAD,CAA6BzC,KAAM,QAASC,MAAOyB,MAG5D,SAAS7B,IACZ,OAAOE,YAAK,UAxBhB2C,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IA0BZ,MAAMC,EAAUC,YAAmC,CAC/ClC,GAAI,OACJZ,KAAM,WACNrB,OAAQ,CACJoE,GAAG,eACIZ,GAEPa,OAAQ,CACJtE,QAAS,OACTC,OAAQ,CACJsE,KAAM,CACFpE,GAAI,CACAqE,OAAQ,cACRC,MAAO,CACHxD,OAAQ,WACRF,QAASC,aAAO,CAAC+C,EAAUxB,KAAmB,CAAEmC,UAAWnC,EAAMhB,aAI7EoD,YAAa,CACvB3E,QAAS,WACKQ,MAAO,WACPoE,KAAM,UACNzE,GAAI,CACA0E,UAAW,CACP9D,QAAS,CAAC,eACNC,aAAO,CAAC+C,EAAUxB,KAAmB,CAAEzB,UAAWyB,EAAMhB,WAC5DN,OAAQ,UAEZN,WAAY,QAEhBV,OAAQ,CACrB6E,SAAU,GAEOC,MAAO,CACHvE,MAAOa,YAAK,iBAIxB2D,SAAU,CACNxE,MAAO,WACPL,GAAI,CACAG,UAAW,aAO/B,CACIS,QAAS,CACLkE,aAAepE,IAEX8B,QAAQC,IAAI,WAAa/B,EAAQC,YAErCoE,KAAM,KACFvC,QAAQC,IAAI,SAEhBuC,UAAYtE,IAER8B,QAAQC,IAAI,kBAAoB/B,EAAQuE,QAAQ5C,OAAOE,UAUjE2C,EAAkBC,IACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAElB,OAAQ,gBAC/B,OACI,gDAAQhD,KAAK,SAASmE,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAElB,OAAQ,aAC/B,OACI,gDAAQhD,KAAK,SAASmE,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,QACI,OACI,gDAAQhE,KAAK,SAASmE,UAAU,iBAAoBH,GAApD,mCAOhB,SAASM,IAAO,MAAD,EACyBC,6BAAmB,CACnDC,MAAO,KACHzE,EAAK,gBAFL0E,EADG,EACHA,MAAOC,EADJ,EACIA,OADJ,KACYhB,SAKaiB,+BAAqB,CACrDC,SAAWC,IACP9E,EAAK,CAAEC,KAAM,YAAaC,MAAO4E,QAFjChF,EANG,EAMHA,OAAmBiF,GANhB,EAMKC,UANL,EAMgBD,MANhB,EAWsBE,YAAWnC,EAAS,CACjDoC,UAAU,EACVxF,QAAS,CACLyF,SAAUC,aAAS,KACf9D,QAAQC,IAAI,qCACZzB,EAAO,CACHuF,gBAAgB,EAChBC,YAAY,OAGpBC,QAASH,aAAS,KACd9D,QAAQC,IAAI,wBACZwD,OAEJS,aAAcJ,aAAU5F,IACpB8B,QAAQC,IAAI,iBACZkE,SAASxD,KAAKoC,MAAMqB,WAAalG,EAAQC,aAE7CkG,SAAUP,aAAS,CAAC5F,EAASoG,KACzBtE,QAAQC,IAAI,eACZmD,EAAM,CAAE/C,KAAMnC,EAAQ6D,eAE1BwC,UAAWT,aAAS,CAAC5F,EAASoG,KAC1BtE,QAAQC,IAAI,eACZoD,UAnCD,mBAWJmB,EAXI,KAWK9F,EAXL,UA6CX,OACI,qBAAKoE,UAAU,MAAf,SACI,cAACJ,EAAD,CAAgBE,MAAO4B,EAASC,QAAS,IAAM/F,EAAK,aAMhE,MAAMgG,EAAcP,SAASQ,eAAe,QAC5CC,SACI,cAAC3B,EAAD,IACAyB,K","file":"static/js/main.0fa2d092.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport {say, listen} from \"./index\";\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, meeting_time?: string } } = {\r\n    //names Charlie Spencer\r\n    \"John\": { person: \"John Appleseed\" }, \r\n    \"Charlie\": { person: \"Charlie Spencer\" }, \r\n    \"Angela\": { person: \"Angela Martin\" }, \r\n    \"Michael\": { person: \"Michael Scott\" }, \r\n    \"Pam\": { person: \"Pam Beesly\" }, \r\n    \"Jim\": { person: \"Jim Halpert\" }, \r\n    \"Dwight\": { person: \"Dwight Schrut\" }, \r\n    \"Creed\": { person: \"Creed Bratton\" }, \r\n    \"Toby\": { person: \"Toby Flenderson\" }, \r\n    \r\n    //day\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"tomorrow\": { day: \"tomorrow\" },\r\n\r\n    //time\r\n    \"at 1\": { meeting_time: \"one\" },\r\n    \"at 2\": { meeting_time: \"two\" },\r\n    \"at 3\": { meeting_time: \"three\" },\r\n    \"at 4\": { meeting_time: \"four\" },\r\n    \"at 5\": { meeting_time: \"five\" },\r\n    \"at 6\": { meeting_time: \"six\" },\r\n    \"at 7\": { meeting_time: \"seven\" },\r\n    \"at 8\": { meeting_time: \"eight\" },\r\n    \"at 9\": { meeting_time: \"nine\" },\r\n    \"at 10\": { meeting_time: \"ten\" },\r\n    \"at 11\": { meeting_time: \"eleven\" }\r\n}\r\n\r\nconst boolGrammar: { [index: string]: { bool?: boolean}}={\r\n    \"yes\": {bool: true},\r\n    \"sure\": {bool: true},\r\n    \"of course\": {bool: true},\r\n    \"that works\": {bool: true},\r\n    \"yeah\": {bool: true},\r\n    \"okay\": {bool: true},\r\n    \"OK\": {bool: true},\r\n    \"absolutely\": {bool: true},\r\n\r\n    \"nope\": {bool: true},\r\n    \"no\": {bool: false},\r\n    \"no way\": {bool: false},\r\n    \"not at all\": {bool: false},\r\n    \"impossible\": {bool: false},\r\n    \"not really\": {bool: false},\r\n    \"not sure\": {bool: false},\r\n    \"I don't know\": {bool: false}\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'welcome',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"whole_day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK ${context.person}. what day is your meeting?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => boolGrammar[context.recResult].bool === true,\r\n                    actions: assign((context) => { return { bool: boolGrammar[context.recResult].bool } }),\r\n                    target: \"confirm_whole\"\r\n                },{\r\n                    cond: (context) => boolGrammar[context.recResult].bool === false,\r\n                    actions: assign((context) => { return { bool: boolGrammar[context.recResult].bool } }),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. ${context.day}. Will it take the whole day?`\r\n                        })),\r\n                        on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                    ask: {\r\n                        entry: listen()\r\n                    },\r\n                    nomatch: {\r\n                        entry: say(\"Sorry I don't understand\"),\r\n                        on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n            }\r\n\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"meeting_time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { meeting_time: grammar[context.recResult].meeting_time } }),\r\n                    target: \"confirm_time\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. what time is your meeting?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `sorry i dont understand ${context.meeting_time}`\r\n                    })),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        confirm_time:{\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => boolGrammar[context.recResult].bool == true,\r\n                    actions: assign((context) => { return { bool: boolGrammar[context.recResult].bool } }),\r\n                    target: \"created\"\r\n                },{\r\n                    cond: (context) => boolGrammar[context.recResult].bool == false,\r\n                    actions: assign((context) => { return { bool: boolGrammar[context.recResult].bool } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. do you want me to create an appointment with ${context.person} on ${context.day} at ${context.meeting_time}?`\r\n                        })),\r\n                        on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n\r\n        },\r\n        confirm_whole: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => boolGrammar[context.recResult].bool == true,\r\n                    actions: assign((context) => { return { bool: boolGrammar[context.recResult].bool } }),\r\n                    target: \"created\"\r\n                },{\r\n                    cond: (context) => boolGrammar[context.recResult].bool == false,\r\n                    actions: assign((context) => { return { bool: boolGrammar[context.recResult].bool } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n                },\r\n                states: {\r\n                    prompt: {\r\n                        entry: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                        })),\r\n                        on: { ENDSPEECH: \"ask\" }\r\n                    },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n\r\n        },\r\n        created: {\r\n            initial: \"prompt\",\r\n            \r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nimport {say, listen} from \"./index\";\r\n\r\n\r\nexport const dmMachineTodo: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'welcome',\r\n    states: {\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            states: {\r\n                prompt: { entry: say(\"Welcome to your to do items. You have nothing to do. so, bye bye.\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { MachineConfig, send, assign } from \"xstate\";\r\nimport {nluRequest} from \"./dmMain\";\r\nimport {promptAndAsk} from \"./index\";\r\n\r\n\r\nexport const dmMachineTimer: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'welcome',\r\n    states: {\r\n        welcome: {\r\n            on: {\r\n            RECOGNISED: {\r\n                target: 'duration',\r\n                actions: assign((context) => { return { duration: context.recResult } }),\r\n                    }\r\n                },\r\n            ...promptAndAsk(\"For how long do you want to set the timer?\")\r\n        },\r\n        duration: {\r\n            invoke: {\r\n            id: 'timer',\r\n                    src: (context, _) => nluRequest(context.duration), \r\n                    onDone: {\r\n                        target: 'set',\r\n                        actions: [assign((_, event) => { return {intent: event.data.intent.name }}),\r\n                      (_:SDSContext, event:any) => console.log(event.data)]\r\n                    },\r\n            onError: {\r\n                        target: 'welcome',\r\n                        actions: (_,event) => console.log(event.data)\r\n                    }\r\n                }\r\n        },\r\n            set: {\r\n                entry: send('ENDSPEECH'),\r\n                on: {\r\n                    ENDSPEECH: [\r\n                        { target: 'confirmation', cond: (context) => context.intent === 'time' },\r\n                        { target: 'welcome' }]\r\n                    }\r\n        },\r\n        confirmation:{\r\n            entry: send((context) => ({\r\n                type: \"SPEAK\",\r\n                value: `OK. time set ${context.duration}`\r\n            }))\r\n        },\r\n        nomatch:{\r\n            entry: send((context) => ({\r\n                type: \"SPEAK\",\r\n                value: `I don't understand. ${context.duration} doesn't seem like a time duration`\r\n            })),\r\n            on: { ENDSPEECH: \"welcome\" }\r\n        }\r\n    }\r\n})\r\n","import { MachineConfig, send, assign } from \"xstate\";\r\n\r\nimport { promptAndAsk } from \"./index\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\nimport { dmMachineTodo } from \"./dmTodo\";\r\nimport { dmMachineTimer } from \"./dmTimer\";\r\n\r\n// RASA API\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = \"https://dialogue-management.herokuapp.com/model/parse\";\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\n\r\nexport const dmMachineMain: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            on: {\r\n            RECOGNISED: {\r\n                target: 'statement',\r\n                actions: assign((context) => { return { statement: context.recResult } }),\r\n                    }\r\n                },\r\n            ...promptAndAsk(\"What would you like to do?\")\r\n        },\r\n        statement: {\r\n            invoke: {\r\n            id: 'nlu',\r\n                    src: (context, _) => nluRequest(context.statement), \r\n                    onDone: {\r\n                        target: 'answer',\r\n                        actions: [assign((_, event) => { return {intent: event.data.intent.name }}),\r\n                      (_:SDSContext, event:any) => console.log(event.data)]\r\n                    },\r\n            onError: {\r\n                        target: 'welcome',\r\n                actions: (_,event) => console.log(event.data)\r\n                    }\r\n                }\r\n        },\r\n            answer: {\r\n            entry: send('ENDSPEECH'),\r\n            on: {\r\n                ENDSPEECH: [\r\n                    { target: 'appointment', cond: (context) => context.intent === 'appointment' },\r\n                    { target: 'item', cond: (context) => context.intent === 'todo_item' },\r\n                    { target: 'timer', cond: (context) => context.intent === 'timer' },\r\n                    { target: 'welcome' }]\r\n                }\r\n                \r\n        },\r\n        appointment: {\r\n           ...dmMachine \r\n        },\r\n        item: {\r\n            ...dmMachineTodo\r\n        },\r\n        timer: {\r\n            ...dmMachineTimer\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Action, Machine, assign, send, State, MachineConfig } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachineMain } from \"./dmMain\";\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nexport function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n\tinitial: 'prompt',\r\n\tstates: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n\t\t        entry: send('LISTEN'),\r\n            }\r\n\t}})\r\n}\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachineMain\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);"],"sourceRoot":""}