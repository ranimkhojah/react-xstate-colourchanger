{"version":3,"sources":["dmColourChanger.ts","index.tsx"],"names":["sayColour","send","context","type","value","recResult","say","text","_context","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","cond","prompt","entry","ENDSPEECH","ask","stop","always","repaint","inspect","url","iframe","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","actions","assign","event","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.4056ece3.chunk.js","sourcesContent":["import { MachineConfig, send, Action } from \"xstate\";\r\n\r\n\r\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\r\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\r\n}))\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: 'stop', cond: (context) => context.recResult === 'stop' },\r\n                    { target: 'repaint' }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Tell me the colour\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n            }\r\n        },\r\n        stop: {\r\n            entry: say(\"Ok\"),\r\n            always: 'init'\r\n        },\r\n        repaint: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: sayColour,\r\n                    on: { ENDSPEECH: 'repaint' }\r\n                },\r\n                repaint: {\r\n                    entry: 'changeColour',\r\n                    always: '#root.dm.welcome'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmColourChanger\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}